{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pixeldev2/code/projects/publishpost/timetrack/src/components/BlogPost/BlogForm.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass BlogForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      labelProp,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: labelProp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          autoComplete: `off`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 17\n        }, this), this.renderError(meta)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      if (touched && error) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `ui error message`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `header`,\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }, this);\n      }\n    };\n\n    this.onFormSubmit = formValues => {\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onFormSubmit),\n        className: `ui form error`,\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: `title`,\n          component: this.renderInput,\n          labelProp: 'Enter Title'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: 'content',\n          component: this.renderInput,\n          labelProp: `Enter Content`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `ui button primary`,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const error = {};\n\n  if (!formValues.title) {\n    error.title = `You must enter title`;\n  }\n\n  if (!formValues.st_time) {\n    error.st_time = `You must enter content`;\n  }\n\n  return error;\n};\n\nexport default reduxForm({\n  form: 'BlogForm',\n  validate: validate\n})(BlogForm);","map":{"version":3,"sources":["/Users/pixeldev2/code/projects/publishpost/timetrack/src/components/BlogPost/BlogForm.js"],"names":["React","Component","Field","reduxForm","BlogForm","renderInput","input","labelProp","meta","className","error","touched","renderError","onFormSubmit","formValues","props","onSubmit","render","handleSubmit","validate","title","st_time","form"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAAA;AAAA;;AAAA,SAE7BI,WAF6B,GAEf,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,SAAR;AAAmBC,MAAAA;AAAnB,KAAD,KAA8B;AACxC,YAAMC,SAAS,GAAI,SAAQD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAG,EAArE;AAEA,0BACI;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA,gCACI;AAAA,oBAAQF;AAAR;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,sBAAWD,KAAX;AAAkB,UAAA,YAAY,EAAG;AAAjC;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGK,KAAKM,WAAL,CAAiBJ,IAAjB,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH,KAZ4B;;AAAA,SAc7BI,WAd6B,GAcf,CAAC;AAACF,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAD,KAAsB;AAChC,UAAIA,OAAO,IAAID,KAAf,EAAsB;AAClB,4BACI;AAAK,UAAA,SAAS,EAAG,kBAAjB;AAAA,iCACI;AAAK,YAAA,SAAS,EAAG,QAAjB;AAAA,sBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKH;AACJ,KAtB4B;;AAAA,SAwB7BG,YAxB6B,GAwBbC,UAAD,IAAgB;AAC3B,WAAKC,KAAL,CAAWC,QAAX,CAAoBF,UAApB;AACH,KA1B4B;AAAA;;AA4B7BG,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,6BACI;AAAM,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWG,YAAX,CAAwB,KAAKL,YAA7B,CAAhB;AAA4D,QAAA,SAAS,EAAG,eAAxE;AAAA,gCACI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAG,OAAd;AAAsB,UAAA,SAAS,EAAE,KAAKR,WAAtC;AAAmD,UAAA,SAAS,EAAE;AAA9D;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAE,SAAb;AAAwB,UAAA,SAAS,EAAE,KAAKA,WAAxC;AAAqD,UAAA,SAAS,EAAG;AAAjE;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAQ,UAAA,SAAS,EAAG,mBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AAtC4B;;AAyCjC,MAAMc,QAAQ,GAAIL,UAAD,IAAgB;AAC7B,QAAMJ,KAAK,GAAG,EAAd;;AACA,MAAI,CAACI,UAAU,CAACM,KAAhB,EAAuB;AACnBV,IAAAA,KAAK,CAACU,KAAN,GAAe,sBAAf;AACH;;AAED,MAAI,CAACN,UAAU,CAACO,OAAhB,EAAyB;AACrBX,IAAAA,KAAK,CAACW,OAAN,GAAiB,wBAAjB;AACH;;AAED,SAAOX,KAAP;AACH,CAXD;;AAaA,eAAeP,SAAS,CAAC;AACrBmB,EAAAA,IAAI,EAAE,UADe;AAErBH,EAAAA,QAAQ,EAAEA;AAFW,CAAD,CAAT,CAGZf,QAHY,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport {Field, reduxForm} from 'redux-form';\n\nclass BlogForm extends Component {\n\n    renderInput = ({input, labelProp, meta}) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n\n        return (\n            <div className={className}>\n                <label>{labelProp}</label>\n                <input {...input} autoComplete={`off`}/>\n                {this.renderError(meta)}\n            </div>\n        );\n    };\n\n    renderError = ({error, touched}) => {\n        if (touched && error) {\n            return (\n                <div className={`ui error message`}>\n                    <div className={`header`}>{error}</div>\n                </div>\n            )\n        }\n    };\n\n    onFormSubmit = (formValues) => {\n        this.props.onSubmit(formValues);\n    };\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.props.handleSubmit(this.onFormSubmit)} className={`ui form error`}>\n                    <Field name={`title`} component={this.renderInput} labelProp={'Enter Title'}/>\n                    <Field name={'content'} component={this.renderInput} labelProp={`Enter Content`}/>\n                    <button className={`ui button primary`}>Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst validate = (formValues) => {\n    const error = {};\n    if (!formValues.title) {\n        error.title = `You must enter title`;\n    }\n\n    if (!formValues.st_time) {\n        error.st_time = `You must enter content`;\n    }\n\n    return error;\n};\n\nexport default reduxForm({\n    form: 'BlogForm',\n    validate: validate\n})(BlogForm);"]},"metadata":{},"sourceType":"module"}